###########################################################################
#                            TextMate Snippets                            #
###########################################################################

priority -50

snippet def "#define ..."
#define ${1}
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}${0}
#endif
endsnippet

snippet #ifd "#ifdef #endif" b
#ifdef ${1:0}
${VISUAL}${0}
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}${0}
	return 0;
}
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0}

#endif /* end of include guard: $1 */
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%f}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%f}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}(${3})
{
	${VISUAL}${0}
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet

###########################################################################

snippet ! "debug"
fprintf(stderr,"!!!! This is a debug index !!!!\n");
endsnippet

snippet wcl "author"
Author: Chenlong Wang, chen.l.wang@ntnu.no, NTNU, `date +%Y`
endsnippet

### variable ###
snippet f "float"
float ${1}
endsnippet

snippet d "double"
double ${1}
endsnippet

snippet i "int"
int ${1}
endsnippet

snippet mc "Madagascar function comment"
/*< ${1} >*/
endsnippet

snippet MD "Msim debug"
MSIM_DEBUG 
endsnippet

snippet todo "TODO" b
/* :TODO: `date +%d`.`date +%m`.`date +%Y`: chenlonw: ${1:Description} */
endsnippet

snippet bug "BUG" b
/* :BUG: `date +%d`.`date +%m`.`date +%Y`: chenlonw: ${1:Description} */
endsnippet

snippet warn "warning" b
/* :WARNING: `date +%d`.`date +%m`.`date +%Y`: chenlonw: ${1:Description} */
endsnippet

snippet sif "statement if"
if (${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

snippet seli "statement else if .. (seli)"
else if (${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

snippet sel "statement else .. (sel)"
else {
	${1}
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; $2++) {
	${VISUAL}${0}
}
endsnippet

snippet 2for "for for loop (for)" b
for (${2:i} = 0; $2 < ${1:count}; $2++) {
	for (${4:i} = 0; $4 < ${3:count}; $4++) {
	${VISUAL}${0}
	}
}
endsnippet
